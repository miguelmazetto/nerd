//function log(val){
//    {{ std::cout << val << "\n"; }}
//}

{{
    #include <vector>

    typedef var (*module_init_t)();

    typedef struct reqmodule{
        unsigned int pathcrc;
        module_init_t init;
    } reqmodule;

    typedef struct loaded_reqmodule{
        unsigned int pathcrc;
        var cache;
    } loaded_reqmodule;

    reqmodule modules[] = __NERD_GET_REQTABLE();

    std::vector<loaded_reqmodule> loaded;

    std::cout << "init require\n";
}}

function require(path){
    {{
        if(path.type == NerdCore::Enum::Type::String){
            std::cerr << "TODO: dynamic require by path solving and crc\n";
            exit(1);

            //if(path.indexOf(".") == -1){ // require('http')
            //    return
            //}
        }else if(path.type < NerdCore::Enum::Type::String){
            unsigned int incrc = path.data.number;

            for (auto &m : loaded){
                if(m.pathcrc == incrc){
                    //std::cout << "Got CRC " << incrc << " from cache.\n";
                    return m.cache;
                }
            }
            for (auto &m : modules){
                if(m.pathcrc == incrc){
                    //std::cout << "Initiated CRC " << incrc << "\n";
                    auto pos = loaded.size();
                    loaded.push_back(loaded_reqmodule{incrc, new NerdCore::Class::Object()});

                    var ret = m.init();

                    loaded[pos].cache = ret;
                    return ret;
                }
            }
            std::cerr << "Require: CRC " << incrc << " does not match any module!\n";
            exit(1);
        }
    }}
}

return require