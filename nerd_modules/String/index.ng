String = function(value)
{
	if(!value)
		value = "";

	return value;
};

{{
	#define VAR2STR(_var) (((C::String*)(_var.data.ptr))->value)
}}

String.prototype.replace = function(_search, _replace)
{
	{{
		if(_search.type != Enum::String) return __NERD_THIS;
		if(_replace.type != Enum::String) return __NERD_THIS;
		//std::string& str = ((NerdCore::Class::String*)(__NERD_THIS.data.ptr))->value;

		//std::string out = VAR2STR(__NERD_THIS);
		//std::string& search = VAR2STR(_search);
		//std::string& replace = VAR2STR(_replace);

		size_t start_pos = ((C::String*)(__NERD_THIS.data.ptr))->value.find((std::string)_search);

		if (start_pos == std::string::npos)
			return NerdCore::VAR(((NerdCore::Class::String*)(__NERD_THIS.data.ptr))->value);
		
		std::string _new = ((NerdCore::Class::String*)(__NERD_THIS.data.ptr))->value;
		return NerdCore::VAR(_new.replace(start_pos, ((std::string)_search).length(), (std::string)_replace));
	}}

}

String.prototype.trim = function(){
	{{
		std::string& str = VAR2STR(__NERD_THIS);
		size_t start = 0;
		size_t end = str.size();
		while(str[start] == ' ') start++;
		while(str[end-1] == ' ') end--;
		auto res = str.substr(start, end-start);
		return res;
	}}
}

String.prototype.toString = function()
{
	return this;
}

return String;